rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function hasValidFields(required, optional) {
      let allFields = request.resource.data.keys();
      return allFields.hasAll(required) && allFields.hasOnly(required.concat(optional));
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && 
        hasValidFields(
          ['name', 'email', 'createdAt', 'updatedAt', 'videosCount', 'followersCount', 'followingCount', 'foodPreferences', 'currentCraving'],
          ['photoUrl', 'bio']
        ) &&
        request.resource.data.foodPreferences is map &&
        request.resource.data.currentCraving is string;
      allow update: if isOwner(userId) &&
        (
          hasValidFields(
            ['name', 'email', 'updatedAt', 'videosCount', 'followersCount', 'followingCount', 'foodPreferences', 'currentCraving'],
            ['photoUrl', 'bio']
          ) &&
          request.resource.data.foodPreferences is map &&
          request.resource.data.currentCraving is string
          ||
          // Special case for videosCount increments
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['videosCount']) &&
           request.resource.data.videosCount == resource.data.videosCount + 1)
          ||
          // Special case for food preferences updates
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['foodPreferences', 'currentCraving']) &&
           request.resource.data.foodPreferences is map &&
           request.resource.data.currentCraving is string)
        );
      allow delete: if false; // Prevent user deletion through client

      // Following subcollection
      match /following/{followedUserId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }

      // Followers subcollection
      match /followers/{followerUserId} {
        allow read: if isSignedIn();
        allow write: if isOwner(followerUserId);
      }
    }

    // Videos/Posts collection
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid &&
        hasValidFields(
          ['userId', 'mediaUrl', 'mediaType', 'foodTags', 'createdAt'],
          ['description', 'location', 'swipeCounts', 'heartCount', 'bookmarkCount']
        );
      allow update: if isSignedIn() && 
        resource.data.userId == request.auth.uid &&
        hasValidFields(
          ['userId', 'mediaUrl', 'mediaType', 'foodTags'],
          ['description', 'location', 'swipeCounts', 'heartCount', 'bookmarkCount']
        );
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Interactions collection
    match /interactions/{interactionId} {
      allow read: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.postId in get(/databases/$(database)/documents/posts/$(request.auth.uid)).data.posts);
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid &&
        hasValidFields(
          ['userId', 'postId', 'type', 'timestamp'],
          ['swipeDirection']
        );
      allow update, delete: if false; // Interactions should be immutable
    }

    // Groups collection (for consensus features)
    match /groups/{groupId} {
      allow read: if isSignedIn() && 
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
      allow create: if isSignedIn() &&
        request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && 
        (resource.data.creatorId == request.auth.uid ||
         exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)));
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;

      // Group members subcollection
      match /members/{memberId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.creatorId == request.auth.uid;
      }
    }
  }
} 
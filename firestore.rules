rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if request is from a service account (cloud function)
    function isServiceAccount() {
      return request.auth.token.firebase.sign_in_provider == 'custom';
    }
    
    function hasValidFields(required, optional) {
      let allFields = request.resource.data.keys();
      return allFields.hasAll(required) && allFields.hasOnly(required.concat(optional));
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) && 
        hasValidFields(
          ['name', 'email', 'createdAt', 'updatedAt', 'videosCount', 'followersCount', 'followingCount', 'foodPreferences', 'currentCraving'],
          ['photoUrl', 'bio', 'heartCount']
        ) &&
        request.resource.data.foodPreferences is map &&
        request.resource.data.currentCraving is string;
      allow update: if isAuthenticated() && (
        // Case 1: Owner updating their profile
        (isOwner(userId) &&
          hasValidFields(
            ['name', 'email', 'updatedAt', 'videosCount', 'followersCount', 'followingCount', 'foodPreferences', 'currentCraving'],
            ['photoUrl', 'bio', 'heartCount']
          ) &&
          request.resource.data.foodPreferences is map &&
          request.resource.data.currentCraving is string
        ) ||
        // Case 2: Owner incrementing their videosCount
        (isOwner(userId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['videosCount']) &&
          request.resource.data.videosCount == resource.data.videosCount + 1
        ) ||
        // Case 3: Owner updating their food preferences
        (isOwner(userId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['foodPreferences', 'currentCraving']) &&
          request.resource.data.foodPreferences is map &&
          request.resource.data.currentCraving is string
        ) ||
        // Case 4: Anyone can increment heartCount (for likes)
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['heartCount']) &&
          request.resource.data.heartCount == resource.data.heartCount + 1
        ) ||
        // Case 5: Allow owner to increment heartCount and update foodPreferences/currentCraving together
        (
          isOwner(userId) &&
          // Only these fields can change
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['heartCount', 'foodPreferences', 'currentCraving']) &&
          // Must be exactly +1
          request.resource.data.heartCount == resource.data.heartCount + 1 &&
          // Ensure types are correct
          request.resource.data.foodPreferences is map &&
          request.resource.data.currentCraving is string
        )
      );
      allow delete: if false; // Prevent user deletion through client

      // Following subcollection
      match /following/{followedUserId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }

      // Followers subcollection
      match /followers/{followerUserId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(followerUserId);
      }

      // Friend requests subcollection
      match /friend_requests/{requestId} {
        // Allow users to read their own friend requests
        allow read: if isOwner(userId);
        // Allow any authenticated user to create a friend request
        // but only if they're sending it as themselves
        allow create: if isAuthenticated() 
          && request.resource.data.requestorId == request.auth.uid;
        // Allow users to delete friend requests they received
        allow delete: if isOwner(userId);
      }

      // Friends subcollection
      match /friends/{friendId} {
        // Allow users to read their own friends list
        allow read: if isOwner(userId);
        // Allow writes in two cases:
        // 1. User is managing their own friends list
        // 2. User is being added as a friend by someone who has them in their friend_requests
        allow write: if isOwner(userId) || 
          (isAuthenticated() && 
           exists(/databases/$(database)/documents/users/$(request.auth.uid)/friend_requests/$(userId)) &&
           friendId == request.auth.uid);
      }
    }

    // Videos/Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        hasValidFields(
          ['userId', 'mediaUrl', 'mediaType', 'foodTags', 'createdAt'],
          ['description', 'location', 'swipeCounts', 'heartCount', 'bookmarkCount', 'previewUrl', 'previewGenerated', 'thumbnailUrl', 'hlsUrl']
        );
      allow update: if 
        // Allow cloud functions to update preview/thumbnail URLs
        (isServiceAccount() && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['previewUrl', 'thumbnailUrl', 'hlsUrl', 'previewGenerated', 'updatedAt'])) ||
        // Allow normal user operations (existing rules)
        (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Interactions collection
    match /interactions/{interactionId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.postId in get(/databases/$(database)/documents/posts/$(request.auth.uid)).data.posts);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        hasValidFields(
          ['userId', 'postId', 'type', 'timestamp'],
          ['swipeDirection']
        );
      allow update, delete: if false; // Interactions should be immutable
    }

    // Groups collection (for consensus features)
    match /groups/{groupId} {
      // Allow reading groups if user is authenticated and is a member
      allow read: if isAuthenticated();
      // Allow listing/querying groups where user is a member
      allow list: if isAuthenticated() && 
        (resource.data.members.hasAny([request.auth.uid]));
      // Allow creating new groups
      allow create: if isAuthenticated() &&
        request.resource.data.creatorId == request.auth.uid &&
        request.resource.data.members.hasAll([request.auth.uid]);
      // Allow updates if user is creator or member
      allow update: if isAuthenticated() && 
        (resource.data.creatorId == request.auth.uid ||
         resource.data.members.hasAny([request.auth.uid]));
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;

      // Group members subcollection
      match /members/{memberId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.creatorId == request.auth.uid;
      }
    }
  }
} 